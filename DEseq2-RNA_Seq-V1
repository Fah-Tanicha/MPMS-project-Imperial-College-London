rm(list=ls()) # clear all variables and graphics
graphics.off()


library(DESeq2)
library(pheatmap)
library(dplyr)
library(RColorBrewer)
library(ggplot2)
library(ggrepel)

#set working directory
setwd('/Users/baiprongfah/Master-ICL/MPMS-project2/SR45-reads')

#load count data 
count_data <- read.csv('counts_table.csv', header = TRUE, row.names = 1)
colnames(count_data)
head(count_data)

#load sample info
sample_info <- read.csv('condition.csv', header = TRUE, row.names = 1)
colnames(sample_info)
head(sample_info)

#set factor levels
sample_info$condition <- factor(sample_info$condition)

#Create a Deseq object and import the count data and sample info
dds <- DESeqDataSetFromMatrix(countData = count_data, 
                              colData = sample_info,
                              design = ~condition)

#set the reference for the treatment factor
dds$condition <- factor(dds$condition, levels = c('control','mutant'))

#Filter the genes, only keep the gene with certain no of reads
keep<- rowSums(counts(dds)) >= 5 #why 5?
dds <- dds[keep,]


#stat test to identify differentially expressed genes
dds <- DESeq(dds) #this function already normalised the count using median of ratios method
deseq_result <- results(dds)
deseq_result

#change DESeq object to dataframe
deseq_result <- as.data.frame(deseq_result)
class(deseq_result)
head(deseq_result)


#Ordering the result table from high to low p value ?
deseq_result_ordered <- deseq_result[order(deseq_result$pvalue),]
head(deseq_result_ordered)

#Try making some quiries 
#Is SR45 differentially expressed?
deseq_result['AT1G16610',]


#Extract the most differentially expressed genes due to the condition
#Select genes with a significnat change in gene expression (adjusted p-value < 0.05)
#And log2foldchange not equal 0

#step1 : filter based on adjusted p value
filtered <- deseq_result %>% filter(deseq_result$padj < 0.05)

#step2 : filter based on fold change not equal to 0
filtered <- filtered %>% filter(abs(filtered$log2FoldChange) != 0)
  #no change happen here tho

dim(deseq_result) #get dimension of an object in rows and columns
dim(filtered) # now the rows are reduced and it was filterd.

#save the deseq result 
write.csv(deseq_result,'de_result.total.csv')
write.csv(filtered,'de_result.filter.csv')


#save the normalised counts

normalised_counts <- counts(dds, normalize = TRUE)
  #normalize = TRUE returns the relative frequency 
  #by dividing all values by the sum of values
head(normalised_counts)
write.csv(normalised_counts, 'normalised_counts.csv')
?normalize

#Visualisation

#Dispersion plot
plotDispEsts(dds)

#plot PCA
#used for explaining the variance in gene expression data set 
#First, perform a variant stabilising transformation ?
vsd <- vst(dds, blind = FALSE) #because plotpca cannot work with dds dataset

plotPCA(dds, intgroup= c('condition'))
#not very useful when only 1 factor

#Heat map
#1: generate the distance matrix
sampleDists <- dist(t(assay(vsd))) #what is this?
samplDistMatrix <- as.matrix(sampleDists) #generate matrix
colnames(samplDistMatrix)

#2:set colors
colors <- colorRampPalette(rev(brewer.pal(9,'Blues')))(255)

?colorRampPalette
#3: generate heat map
pheatmap(samplDistMatrix, clustering_distance_rows = sampleDists,
         clustering_distance_cols = sampleDists,col =colors)

#heatmap based on log transformed normalised counts
#using top 20 genes
top_hits <- deseq_result[order(deseq_result$padj),][1:30,]
top_hits <- row.names(top_hits)

rld <- rlog(dds, blind = FALSE)

pheatmap(assay(rld)[top_hits,], cluster_rows = TRUE,
         show_rownames = TRUE, cluster_cols = TRUE)
pheatmap(assay(rld)[top_hits,])


#heat map of Z scores
cal_z_score <- function(x){(x-mean(x))/sd(x)}

zscore_all <- t(apply(normalised_counts, 1, cal_z_score))
zscore_subset <- zscore_all[top_hits,]
pheatmap(zscore_subset)


#MA plot
plotMA(dds, ylim=c(-2,2))

resultsNames(dds)
if (!require("BiocManager", quietly = TRUE))
  install.packages("BiocManager")

BiocManager::install("apeglm")

resLFC <- lfcShrink(dds, coef = "condition_mutant_vs_control", type= "apeglm")
resLFC

plotMA(resLFC, ylim=c(-2,2))

#volcano plot

#changeresLFC to a dataframe
resLFC <- as.data.frame(resLFC)

#label the genes
resLFC$diffexpressed <- 'NO'
resLFC$diffexpressed[resLFC$log2FoldChange>0.1 & resLFC$padj < 0.05] <- 'UP'
resLFC$diffexpressed[resLFC$log2FoldChange<0.1 & resLFC$padj < 0.05] <- 'DOWN'

resLFC$delabel <- NA

table(unlist(strsplit(tolower(resLFC$diffexpressed), " ")))

ggplot(data = resLFC, aes(x=log2FoldChange, y= -log10(pvalue),
                          col = diffexpressed, label=delabel))+
  geom_point()+
  theme_minimal()+
  geom_text_repel()+
  scale_color_manual(values = c('blue','black','red'))#+
  #theme(text=element_text(size=8))
  
